{"ast":null,"code":"var _jsxFileName = \"/home/gio/PhpstormProjects/Quizze_APP/src/Answers.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Answers(_ref) {\n  _s();\n  let {\n    data,\n    addAnswer,\n    index,\n    questionItem,\n    submit\n  } = _ref;\n  const [correctClick, setCorrectClick] = React.useState(false);\n  const [localIndex, setLocalIndex] = React.useState(null);\n  const [submited, setSubmited] = React.useState(false);\n  // i dont want to reset random answers on every re-render\n  const [shuffleData, setShuffleData] = React.useState(data.sort((a, b) => 0.5 - Math.random()));\n  function clickAnswer(item, localIndex) {\n    // if it is not submited add show answers\n    if (!submit) {\n      setLocalIndex(localIndex);\n      let isCorrect;\n      if (questionItem.correct_answer === item) {\n        setCorrectClick(!correctClick);\n        isCorrect = true;\n      } else {\n        isCorrect = false;\n      }\n      addAnswer(item, index, isCorrect);\n    }\n  }\n  React.useEffect(() => {\n    setSubmited(submit);\n  }, [submit]);\n  function setClass(index, localIndex) {\n    if (index === localIndex && submited) {\n      return 'false-active';\n    }\n    if (index !== localIndex && submited) {\n      return \"other-btns\";\n    }\n    if (index === localIndex) {\n      return \"active\";\n    }\n  }\n  function showCorrect(item) {\n    if (questionItem.correct_answer === item && submited) {\n      return '#94D7A2';\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: shuffleData.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => clickAnswer(item, index),\n        className: setClass(index, localIndex),\n        style: {\n          backgroundColor: showCorrect(item)\n        },\n        children: item\n      }, item, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false);\n}\n_s(Answers, \"oIvi69likfvcQ16ayzTS2K6uAmo=\");\n_c = Answers;\nvar _c;\n$RefreshReg$(_c, \"Answers\");","map":{"version":3,"names":["React","Answers","data","addAnswer","index","questionItem","submit","correctClick","setCorrectClick","useState","localIndex","setLocalIndex","submited","setSubmited","shuffleData","setShuffleData","sort","a","b","Math","random","clickAnswer","item","isCorrect","correct_answer","useEffect","setClass","showCorrect","map","backgroundColor"],"sources":["/home/gio/PhpstormProjects/Quizze_APP/src/Answers.js"],"sourcesContent":["import React from \"react\"\r\n\r\n\r\nexport default function Answers({data, addAnswer, index, questionItem, submit}) {\r\n\r\n    const [correctClick, setCorrectClick] = React.useState(false)\r\n    const [localIndex, setLocalIndex] = React.useState(null)\r\n    const [submited, setSubmited] = React.useState(false)\r\n    // i dont want to reset random answers on every re-render\r\n    const [shuffleData, setShuffleData] = React.useState(data.sort((a, b) => 0.5 - Math.random()))\r\n\r\n    function clickAnswer(item, localIndex) {\r\n        // if it is not submited add show answers\r\n        if (!submit) {\r\n            setLocalIndex(localIndex)\r\n            let isCorrect;\r\n            if (questionItem.correct_answer === item) {\r\n                setCorrectClick(!correctClick)\r\n                isCorrect = true\r\n            }else {\r\n                isCorrect = false\r\n            }\r\n            addAnswer(item, index, isCorrect)\r\n        }\r\n    }\r\n\r\n    \r\n    React.useEffect(() => {\r\n        setSubmited(submit)\r\n    }, [submit])\r\n    \r\n    function setClass(index, localIndex) {\r\n        \r\n        if (index === localIndex && submited) {\r\n            return 'false-active'\r\n        } \r\n        if (index !== localIndex && submited) {\r\n            return \"other-btns\"\r\n        }\r\n        if (index === localIndex) {\r\n            return \"active\"\r\n        }\r\n        \r\n    } \r\n\r\n    function showCorrect(item) {\r\n        if (questionItem.correct_answer === item && submited) {\r\n            return '#94D7A2'\r\n        } \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {shuffleData.map((item, index) => {\r\n                return <button key={item} onClick={() => clickAnswer(item, index)}\r\n                className={setClass(index, localIndex)} style={{backgroundColor: showCorrect(item)}}>{item}</button>\r\n            })}\r\n        </>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAAA;AAGzB,eAAe,SAASC,OAAO,OAAiD;EAAA;EAAA,IAAhD;IAACC,IAAI;IAAEC,SAAS;IAAEC,KAAK;IAAEC,YAAY;IAAEC;EAAM,CAAC;EAE1E,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,KAAK,CAACS,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGb,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC;EACrD;EACA,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGf,KAAK,CAACS,QAAQ,CAACP,IAAI,CAACc,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE,CAAC,CAAC;EAE9F,SAASC,WAAW,CAACC,IAAI,EAAEZ,UAAU,EAAE;IACnC;IACA,IAAI,CAACJ,MAAM,EAAE;MACTK,aAAa,CAACD,UAAU,CAAC;MACzB,IAAIa,SAAS;MACb,IAAIlB,YAAY,CAACmB,cAAc,KAAKF,IAAI,EAAE;QACtCd,eAAe,CAAC,CAACD,YAAY,CAAC;QAC9BgB,SAAS,GAAG,IAAI;MACpB,CAAC,MAAK;QACFA,SAAS,GAAG,KAAK;MACrB;MACApB,SAAS,CAACmB,IAAI,EAAElB,KAAK,EAAEmB,SAAS,CAAC;IACrC;EACJ;EAGAvB,KAAK,CAACyB,SAAS,CAAC,MAAM;IAClBZ,WAAW,CAACP,MAAM,CAAC;EACvB,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,SAASoB,QAAQ,CAACtB,KAAK,EAAEM,UAAU,EAAE;IAEjC,IAAIN,KAAK,KAAKM,UAAU,IAAIE,QAAQ,EAAE;MAClC,OAAO,cAAc;IACzB;IACA,IAAIR,KAAK,KAAKM,UAAU,IAAIE,QAAQ,EAAE;MAClC,OAAO,YAAY;IACvB;IACA,IAAIR,KAAK,KAAKM,UAAU,EAAE;MACtB,OAAO,QAAQ;IACnB;EAEJ;EAEA,SAASiB,WAAW,CAACL,IAAI,EAAE;IACvB,IAAIjB,YAAY,CAACmB,cAAc,KAAKF,IAAI,IAAIV,QAAQ,EAAE;MAClD,OAAO,SAAS;IACpB;EACJ;EAGA,oBACI;IAAA,UACKE,WAAW,CAACc,GAAG,CAAC,CAACN,IAAI,EAAElB,KAAK,KAAK;MAC9B,oBAAO;QAAmB,OAAO,EAAE,MAAMiB,WAAW,CAACC,IAAI,EAAElB,KAAK,CAAE;QAClE,SAAS,EAAEsB,QAAQ,CAACtB,KAAK,EAAEM,UAAU,CAAE;QAAC,KAAK,EAAE;UAACmB,eAAe,EAAEF,WAAW,CAACL,IAAI;QAAC,CAAE;QAAA,UAAEA;MAAI,GADtEA,IAAI;QAAA;QAAA;QAAA;MAAA,QAC4E;IACxG,CAAC;EAAC,iBACH;AAEX;AAAC,GAzDuBrB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}